# Stati18n v0.2
# stati18n.py
# Created by Florian Rotagnon
# Licensed under MIT
 
import os
import sys
import xml.etree.ElementTree as ET
import codecs

__author__ = 'Florian Rotagnon'


class FileManager:
    def __init__(self):
        pass

    @staticmethod
    def get_content(file_name):
        if os.path.isfile(file_name):
            return ET.parse(file_name).getroot()
        else:
            raise FileNotFoundError

    @staticmethod
    def __create_css(name):
        print("create new css file "+name)
        fp = codecs.open(name, 'w', 'utf-8')
        fp.write("/*!\n * Generated by Stati18n v0.2\n * "
           + name
           + "\n * Created by Florian Rotagnon\n * Licensed under MIT\n */\n ")
        return fp

    @staticmethod
    def __get_deported(xml):
        list_deported = {}
        for text in xml.iter('text'):
            for translation in text.iter('translation'):
                #if translation.get('deport') is not None and translation.get('deport') == 'true':
                list_deported[translation.get('lang')] = True
        return list_deported

    @classmethod
    def create_stati18n(cls, xml):
        fps = {}
        minify = ("true" == xml.find('file').find('minified').text)
        host = xml.find('host').find('name').text
        host = '' if host is None else host
        file_name = xml.find('file').find('name').text
        fps['main'] = cls.__create_css(file_name + '.css')

        list_deported = cls.__get_deported(xml)

        dep = ''

        fix_text_map = {}

        for key in list_deported:
            dep += " " + key

        if not minify:
            #fps['main'].write("\n#stati18n-infos{\n	content  : '" + host + ' ' + dep + "';\n}")
            fps['main'].write("\n#stati18n-infos{\n\tcontent  : '" + host + dep + "';\n\tcustomContent  : '" + host + dep + "';\n}")
        else:
            fps['main'].write("#stati18n-infos{content:" + host + dep + ";customContent:" + host + dep + ";}")

        for text in xml.iter('text'):
            id = text.get('id')
            insertion = text.get('insertion')

            if "before" != insertion and "after" != insertion:
                insertion = "after"

            for translation in text.iter('translation'):
                language = translation.get('lang')
                data = translation
                fix = False
                i = 'main'

                #if translation.get('deport') is not None and translation.get('deport') == 'true':

                if not language in fps:
                    fps[language] = cls.__create_css(file_name + "-" + language + '.css')

                i = language

                if translation.get('fix') is not None:
                    fix = (translation.get('fix') == 'true')

                if fix:
                    fix_text_map[language + "§§" + id] = data.text
                elif not minify:
                    fps[i].write("\n.stati18n.s18n-"
                                   + id + ":" + insertion
                                   + " {\n\tcontent: \""
                                   + data.text + "\";\n}")
                else:
                    fps[i].write(".stati18n.s18n-" + id
                    + ":" + insertion
                    + "{content:\"" + data.text
                    + "\";}")
        data = ''
        for key in fix_text_map:
            data += key + '§§' + fix_text_map[key] + ';;'

        if not minify:
            fps['main'].write("\n#stati18n-fixed-values {\n\tcontent: '"+data+"';\n\tcustomContent: '"+data+"';\n}")
        else:
            fps['main'].write("#stati18n-fixed-values{content:'"+data+"';customContent:'"+data+"';}")


        for fp in fps:
            fps[fp].close()

#Script start
if 2 != len(sys.argv):
    print("Usage: python "+sys.argv[0]+" [name.xml]")
    exit(1)

try:
    domArr = FileManager.get_content(sys.argv[1])
    FileManager.create_stati18n(domArr)
except FileNotFoundError:
    print("File not found : " + sys.argv[1])
else:
    print("Stati18n  : parsing success")